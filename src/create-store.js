import { createStore, applyMiddleware, combineReducers } from 'redux';

// Вы можете рассмотреть более подробно код используемого нами promise middleware –
// оно не слишком сложно и это будет хорошим упражнением для понимания middleware.

import promiseMiddleware from './promise-middleware';

// В этом приложении у нас будет всего один редуктор,
// но приведенная выше ES6 нотация импорта является довольно-таки интересной возможностью импортировать,
// а затем вызывать редукторы без дополнительного указания их названия.

import * as reducers from './reducers';

// Параметр функции data, который мы можем увидеть ниже в коде,
// используется для инициализации нашего Redux-хранилища переданными данными.
// Мы еще не обсуждали этот момент ради простоты примеров в предыдущих главах,
// но благодаря этому, наши редукторы могут быть инициализированы реальными данными,
// если у вас они уже есть.
// Например, когда вы получаете данные от сервера, сериализируете их и передаете в клиент,
// то ваше Redux-хранилище может быть инициализировано с помощью этих данных.
// В данном примере мы не передаем никаких данных, но полезно будет знать о такой возможности в createStore

export default function( data ) {
  var reducer          = combineReducers( reducers );
  var finalCreateStore = applyMiddleware( promiseMiddleware )( createStore );
  var store            = finalCreateStore( reducer, data );

  return store;
}
